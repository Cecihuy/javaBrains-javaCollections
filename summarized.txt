ArrayList performance
* get - O(1)
* set - O(1)
* contains - O(n)
* remove(index) - O(n)
* add(index) - O(n)
* add - ?
    ? best case - O(1)
    ? worst case - O(n)
    ? most case - O(1)

LinkedList performance
* get - O(n)
* set - O(n)
* contains - O(n)
* remove(index) - O(1)
* add(index) - O(1)
* add - O(1)

ArrayList vs LinkedList
* position based access - ArrayList
* constant and random insertions and removals - LinkedList
* iteration - either

HashSet efficiency
* add - O(1)
* remove - O(1)
* contains - O(1)
* load factor 12/16 = 0.75
* initial number of buckets is 16
* number of elements to rehash 12

LinkedHashSet advantages
* insertion order
* ordered iteration O(1) time
* add - O(1)
* contains - O(1)
* next - O(1)

TreeSet performance
* add - O(log n)
* contains = O(log n)
* iteration - O(log n)

HashSet vs TreeSet
* order isn't important - HashSet
* sorting is'nt important - HashSet
* good hashing strategy - HashSet
* predictable load factor - HashSet

HashMap performance
* get - O(1)
* containsKey - O(1)
* put - O(1)